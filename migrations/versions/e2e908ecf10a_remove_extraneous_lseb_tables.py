"""Remove extraneous LSEB tables

Revision ID: e2e908ecf10a
Revises: dbd912ab36e8
Create Date: 2019-07-04 10:38:22.064987

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "e2e908ecf10a"
down_revision = "dbd912ab36e8"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("socio_economic")
    op.drop_table("school_type")
    op.drop_table("free_school_meals")
    op.drop_table("qualification_level")
    op.drop_table("income_earner_employee_status")
    op.drop_table("supervised_others")
    op.add_column(
        "candidate", sa.Column("main_job_type_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(
        None, "candidate", "main_job_type", ["main_job_type_id"], ["id"]
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "candidate", type_="foreignkey")
    op.drop_column("candidate", "main_job_type_id")
    op.create_table(
        "supervised_others",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('supervised_others_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("value", sa.VARCHAR(length=512), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="supervised_others_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "income_earner_employee_status",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('income_earner_employee_status_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("value", sa.VARCHAR(length=512), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="income_earner_employee_status_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "qualification_level",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('qualification_level_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("value", sa.VARCHAR(length=128), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="qualification_level_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "free_school_meals",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('free_school_meals_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("value", sa.VARCHAR(length=512), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="free_school_meals_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "socio_economic",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "self_identify_lower_socio_economic_background",
            sa.VARCHAR(length=256),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("school_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "qualification_level_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("main_job_type_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("candidate_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "supervised_others_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "free_school_meals_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "income_earner_employee_status_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["candidate_id"], ["candidate.id"], name="socio_economic_candidate_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["free_school_meals_id"],
            ["free_school_meals.id"],
            name="socio_economic_free_school_meals_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["income_earner_employee_status_id"],
            ["income_earner_employee_status.id"],
            name="socio_economic_income_earner_employee_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["main_job_type_id"],
            ["main_job_type.id"],
            name="socio_economic_main_job_type_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["qualification_level_id"],
            ["qualification_level.id"],
            name="socio_economic_qualification_level_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["school_id"], ["school_type.id"], name="socio_economic_school_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["supervised_others_id"],
            ["supervised_others.id"],
            name="socio_economic_supervised_others_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="socio_economic_pkey"),
    )
    op.create_table(
        "school_type",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("value", sa.VARCHAR(length=256), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="school_type_pkey"),
    )
    # ### end Alembic commands ###
